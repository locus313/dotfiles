{{- if eq .chezmoi.os "windows" -}}
# Set UTF-8 encoding for better compatibility
# https://ohmyposh.dev/docs/faq#my-prompt-is-broken-after-upgrading-to-powershell-74
[Console]::OutputEncoding = [Text.Encoding]::UTF8

# Initialize oh-my-posh with night-owl theme
if (Get-Command oh-my-posh -ErrorAction SilentlyContinue) {
    oh-my-posh init pwsh --config $env:POSH_THEMES_PATH\night-owl.omp.json | Invoke-Expression
} else {
    Write-Warning "oh-my-posh not found. Please install it to enable enhanced prompt."
}

# PowerShell modules to install and import
$modules = @("posh-git", "Terminal-Icons", "PsReadLine")

foreach ($module in $modules) {
    try {
        if (-not (Get-Module -ListAvailable -Name $module)) {
            Write-Host "Installing module: $module" -ForegroundColor Yellow
            Install-Module -Name $module -Scope CurrentUser -Force -SkipPublisherCheck
        }
        Import-Module -Name $module -ErrorAction SilentlyContinue
    }
    catch {
        Write-Warning "Failed to install or import module: $module. Error: $($_.Exception.Message)"
    }
}

# Azure CLI Tab Completion
if (Get-Command az -ErrorAction SilentlyContinue) {
    Register-ArgumentCompleter -Native -CommandName az -ScriptBlock {
        param($commandName, $wordToComplete, $cursorPosition)
        $completion_file = New-TemporaryFile
        $env:ARGCOMPLETE_USE_TEMPFILES = 1
        $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file
        $env:COMP_LINE = $wordToComplete
        $env:COMP_POINT = $cursorPosition
        $env:_ARGCOMPLETE = 1
        $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0
        $env:_ARGCOMPLETE_IFS = "`n"
        $env:_ARGCOMPLETE_SHELL = 'powershell'
        az 2>&1 | Out-Null
        Get-Content $completion_file | Sort-Object | ForEach-Object {
            [System.Management.Automation.CompletionResult]::new($_, $_, "ParameterValue", $_)
        }
        Remove-Item $completion_file, Env:\_ARGCOMPLETE_STDOUT_FILENAME, Env:\ARGCOMPLETE_USE_TEMPFILES, Env:\COMP_LINE, Env:\COMP_POINT, Env:\_ARGCOMPLETE, Env:\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\_ARGCOMPLETE_IFS, Env:\_ARGCOMPLETE_SHELL
    }
}

# Source PowerShell script files
$scriptPath = "$env:USERPROFILE/Scripts/PowerShell"
$scriptFiles = @(
    "chezmoi.ps1",
    "githelpers.ps1", 
    "linuxlike.ps1",
    "psreadline.ps1",
    "teams.ps1",
    "utils.ps1"
)

{{- if eq .pmode true }}
$scriptFiles += "rename.ps1"
{{- end }}

foreach ($script in $scriptFiles) {
    $fullPath = Join-Path $scriptPath $script
    if (Test-Path $fullPath) {
        try {
            . $fullPath
        }
        catch {
            Write-Warning "Failed to source script: $script. Error: $($_.Exception.Message)"
        }
    } else {
        Write-Warning "Script not found: $fullPath"
    }
}

# Set environment variables
$env:XDG_CONFIG_HOME = "$env:USERPROFILE\.config"

# Direnv hook (commented out - enable if needed)
# if (Test-Path "$env:USERPROFILE\AppData\Local\Microsoft\WinGet\Packages\direnv.direnv_Microsoft.Winget.Source_8wekyb3d8bbwe\direnv.exe") {
#     $direnv = "$env:USERPROFILE\AppData\Local\Microsoft\WinGet\Packages\direnv.direnv_Microsoft.Winget.Source_8wekyb3d8bbwe\direnv.exe"
#     Invoke-Expression (& $direnv hook pwsh | Out-String)
# }

{{- end }}