{{- if (eq .chezmoi.os "windows" "darwin") -}}
# Microsoft Teams and Skype for Business Online Management Functions

function Test-TeamsAuthentication {
    <#
    .SYNOPSIS
    Check if authenticated to Microsoft Teams and connect if needed.
    
    .DESCRIPTION
    Verifies if there is an active Microsoft Teams PowerShell session.
    If not authenticated, prompts to connect using Connect-MicrosoftTeams.
    
    .EXAMPLE
    Test-TeamsAuthentication
    #>
    [CmdletBinding()]
    param()
    
    try {
        # Try to get tenant information to test authentication
        $tenantInfo = Get-CsTenant -ErrorAction Stop
        Write-Verbose "Already authenticated to Microsoft Teams tenant: $($tenantInfo.DisplayName)"
        return $true
    }
    catch {
        Write-Warning "Not authenticated to Microsoft Teams. Attempting to connect..."
        try {
            Connect-MicrosoftTeams
            Write-Host "Successfully connected to Microsoft Teams" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Error "Failed to connect to Microsoft Teams: $($_.Exception.Message)"
            return $false
        }
    }
}

function Get-TeamsUserVoiceInfo {
    <#
    .SYNOPSIS
    Get Teams voice configuration information for a user.
    
    .DESCRIPTION
    Retrieves key voice-related properties for a Teams user including display name,
    enterprise voice status, hosted voicemail, voice routing policy, and line URI.
    
    .PARAMETER Identity
    The user's UPN, SIP address, or object ID.
    
    .EXAMPLE
    Get-TeamsUserVoiceInfo -Identity "user@domain.com"
    
    .EXAMPLE
    Get-TeamsUserVoiceInfo "user@domain.com"
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Identity
    )
    
    # Check authentication before proceeding
    if (-not (Test-TeamsAuthentication)) {
        return
    }
    
    try {
        Get-CsOnlineUser -Identity $Identity | Select-Object DisplayName, EnterpriseVoiceEnabled, HostedVoiceMail, OnlineVoiceRoutingPolicy, LineUri
    }
    catch {
        Write-Error "Failed to retrieve Teams user voice information for '$Identity': $($_.Exception.Message)"
    }
}

# Create alias for shorter command
Set-Alias -Name gtuvi -Value Get-TeamsUserVoiceInfo

function Set-TeamsUserVoiceConfig {
    <#
    .SYNOPSIS
    Configure Teams user with phone number, enterprise voice, and voice routing policy.
    
    .DESCRIPTION
    Assigns a phone number, enables enterprise voice, and grants a voice routing policy 
    to a Teams user in a single operation. This combines three common Teams administration
    tasks into one convenient function.
    
    .PARAMETER Identity
    The user's UPN, SIP address, or object ID.
    
    .PARAMETER PhoneNumber
    The phone number to assign in E.164 format (e.g., +16505555555).
    
    .PARAMETER PolicyName
    The name of the voice routing policy to assign.
    
    .PARAMETER PhoneNumberType
    The type of phone number assignment. Default is DirectRouting.
    
    .EXAMPLE
    Set-TeamsUserVoiceConfig -Identity "user@domain.com" -PhoneNumber "+16505555555" -PolicyName "TeamsRoutePolicy"
    
    .EXAMPLE
    Set-TeamsUserVoiceConfig "user@domain.com" "+16505555555" "TeamsRoutePolicy"
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$Identity,
        
        [Parameter(Mandatory = $true, Position = 1)]
        [string]$PhoneNumber,
        
        [Parameter(Mandatory = $true, Position = 2)]
        [string]$PolicyName,
        
        [Parameter(Position = 3)]
        [string]$PhoneNumberType = "DirectRouting"
    )
    
    # Check authentication before proceeding
    if (-not (Test-TeamsAuthentication)) {
        return
    }
    
    try {
        Write-Host "Configuring Teams voice settings for user: $Identity" -ForegroundColor Green
        
        # Step 1: Assign phone number
        Write-Host "  Assigning phone number: $PhoneNumber" -ForegroundColor Yellow
        Set-CsPhoneNumberAssignment -Identity $Identity -PhoneNumber $PhoneNumber -PhoneNumberType $PhoneNumberType
        
        # Step 2: Enable enterprise voice
        Write-Host "  Enabling enterprise voice" -ForegroundColor Yellow
        Set-CsPhoneNumberAssignment -Identity $Identity -EnterpriseVoiceEnabled $true
        
        # Step 3: Grant voice routing policy
        Write-Host "  Granting voice routing policy: $PolicyName" -ForegroundColor Yellow
        Grant-CsOnlineVoiceRoutingPolicy -Identity $Identity -PolicyName $PolicyName
        
        Write-Host "Successfully configured Teams voice settings for $Identity" -ForegroundColor Green
        
        # Show the result
        Write-Host "`nCurrent voice configuration:" -ForegroundColor Cyan
        Get-TeamsUserVoiceInfo -Identity $Identity
    }
    catch {
        Write-Error "Failed to configure Teams voice settings for '$Identity': $($_.Exception.Message)"
    }
}

# Create alias for shorter command
Set-Alias -Name stuvc -Value Set-TeamsUserVoiceConfig

{{- end }}
